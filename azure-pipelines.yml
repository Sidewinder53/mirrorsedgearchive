name: $(Date:yyyyMMdd)$(Rev:.r)

variables:
  npm_config_cache: $(Pipeline.Workspace)/.npm

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: BuildAndPublish
  displayName: 'Build & Publish to Docker'
  jobs:
  - job: PhaseOne
    displayName: 'Phase One'
    steps:
    - task: UseNode@1
      inputs:
        version: '14.x'
      displayName: 'Install Node'

    - task: Cache@2
      inputs:
        key: 'npm | "$(Agent.OS)" | package-lock.json'
        restoreKeys: |
           npm | "$(Agent.OS)"
        path: $(npm_config_cache)
        cacheHitVar: npm_cache_restored
      displayName: Cache npm

    - task: Npm@1
      inputs:
        command: 'install'
      displayName: 'Install NPM'
      condition: ne(variables.npm_cache_restored, 'true')

    - task: gulp@1
      inputs:
        targets: 'buildProduction'
        enableCodeCoverage: false
      displayName: 'Build release using gulp'

    - task: CopyFiles@2
      inputs:
        Contents: '$(Build.SourcesDirectory)/dist/**'
        targetFolder: $(Build.ArtifactStagingDirectory)
      displayName: 'Copy dist to Artifact Staging'

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/dist/'
        artifactName: MEA-artifact
      displayName: 'Publish Staged Artifacts to "MEA-artifact"'

    # Run this only when it's not a PR validation build and source branch is 'main' or 'sandbox'
    - task: Docker@2
      inputs:
        containerRegistry: 'sidewinder53@hub.docker.com'
        repository: 'sidewinder53/mea'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(Build.SourceBranchName)-$(Build.BuildId)
          $(Build.SourceBranchName)-latest
          $(Build.SourceBranchName)
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), in(variables['Build.SourceBranchName'], 'main', 'sandbox'))
